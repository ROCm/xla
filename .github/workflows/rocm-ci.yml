name: ROCm CI

on:
  workflow_dispatch:
  push:
    branches:
      - rocm-main
      - 'rocm-jaxlib-v*'
  pull_request:
    branches:
      - rocm-main
      - 'rocm-jaxlib-v*'

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  test-and-analyze-xla-1:
    runs-on: mi-250
    container:
      image: rocm/tensorflow-build:latest-jammy-python3.11-rocm6.3.0
      options:
        --device=/dev/kfd
        --device=/dev/dri
        --ipc=host
        --shm-size=16G
        --group-add=video
        --cap-add=SYS_PTRACE
        --security-opt=seccomp=unconfined
    steps:
      - uses: actions/checkout@v4
      # TODO: Skip using the bazel cache until runners have the proper permissions.
      #- name: Unzip the Bazel cache
      #  run: unzip -q /tf/disk_cache.zip -d /tf/cache
      - name: Test XLA
        run: echo hello #build_tools/rocm/run_xla_ci_build.sh rocm_ci 1
  test-and-analyze-xla-2:
    runs-on: mi-250
    container:
      image: rocm/tensorflow-build:latest-jammy-python3.11-rocm6.3.0
      options:
        --device=/dev/kfd
        --device=/dev/dri
        --ipc=host
        --shm-size=16G
        --group-add=video
        --cap-add=SYS_PTRACE
        --security-opt=seccomp=unconfined
      volumes:
        - xla_bazel_cache:/tmp/bazel_cache_archives
        - /tmp/xla_bazel_cache:/tmp/bazel_disk_cache
    steps:
      - uses: actions/checkout@v4
      # TODO: Skip using the bazel cache until runners have the proper permissions.
      #- name: Unzip the Bazel cache
      #  run: unzip -q /tf/disk_cache.zip -d /tf/cache
      - name: Unzip the bazel cache
        run: unzip -q /tmp/bazel_cache_archives/cache.zip -d /tmp/bazel_disk_cache || true
      - name: Test XLA
        run: build_tools/rocm/run_xla_ci_build.sh rocm_ci 2
      - name: Zip up the bazel cache
        if: always()
        run: |
          zip -r /tmp/bazel_cache_archives/cache.zip /tmp/bazel_disk_cache; \
          rm -rf /tmp/bazel_disk_cache/*
  build-jax-plugin:
    runs-on: mi-250
    env:
      PYTHON_VERSIONS: "3.10.13"
      ROCM_VERSION: "6.4.1"
    steps:
      - name: Cleanup old XLA code
        run: |
          docker run --rm -v "./:/xla" ubuntu /bin/bash -c "chown -R $UID /xla || true"
          rm -rf *
      - name: Checkout JAX plugin
        uses: actions/checkout@v4
        with: 
          repository: rocm/rocm-jax
          # We might eventually want to choose something more stable than master
          ref: master
          token: blahblahblah
      - name: Checkout XLA into JAX plugin
        uses: actions/checkout@v4
        with:
          path: rocm-jax/xla
      - name: Build JAX plugin
        run: |
          # For now, just make sure our files are in the right place
          ls -lah .
          ls -lah rocm-jax
          ls -lah rocm-jax/xla



